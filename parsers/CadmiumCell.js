'use strict';

import Core from '../tools/core.js';
import Parser from "./parser.js";

import { Simulation, TransitionsCA, TransitionCA, Options, Files } from './files.js';

import Settings from '../components/settings.js';
import Scale from '../components/scales/basic.js';
import State from '../simulation/state.js';

export default class CadmiumCell extends Parser { 
	
	Parse(files) {
		var d = Core.Defer();
		
		var cfg = files.find(function(f) { return f.name.match(/\.json/i); });
		var log = files.find(function(f) { return f.name.match(/\.txt/i); });

		if (!cfg || !log) {
			d.Reject(new Error("A config (.json) and a log (.txt) file must be provided for the Cadmium Cell-DEVS parser."));
		
			return d.promise;
		}
		
		this.Read(cfg, (content) => JSON.parse(content)).then(cfg => {
			if (!cfg) return d.Reject(new Error("Unable to parse the config (.json) file."));
				
			this.ReadByChunk(log, this.ParseLogChunk.bind(this, cfg)).then(log => {				
				if (!log) return d.Reject(new Error("Unable to parse the log (.log) file."));
				
				var simulation = new Simulation(cfg.models[0].name, "Cadmium", "Cell-DEVS", cfg.models, cfg.size);
				var transitions = new TransitionsCA(log);
				
				var options = Settings.Default();

				cfg.models[0].ports.forEach((p, i) => {
					options.grid.layers.push({ z : 0, ports : [p.name], style : i });
				});
				
				options.grid.styles = cfg.styles;
				
				var files = new Files(simulation, transitions, null, new Options(options));
				
				d.Resolve(files);
			}, (error) => d.Reject(error));
		}, (error) => d.Reject(error));
		
		return d.promise;
	}
		
	ParseLogChunk(cfg, parsed, chunk) {		
		var start = chunk.indexOf('[', 0);		
		
		while (start > -1) {				
			var end = chunk.indexOf('\n', start);
			
			if (end == -1) end = chunk.length + 1;
			
			var line = chunk.substr(start, end - start);
			
			// parse coord 
			var i = line.indexOf("(") + 1;
			var j = line.indexOf(")", i);
			var c = line.substr(i, j - i).split(',');
			
			// parse values
			var i = line.indexOf("<", j) + 1;
			var j = line.indexOf(">", i);
			var v = line.substr(i, j - i).split(',');
		
			// parse model name
			var patt = "generated by model ";
			var i = line.indexOf(patt, j) + patt.length;
			var j = line.indexOf("_(", i);
			var m = line.substr(i, j - i);
			
			for (var i = 0; i < v.length; i++) {
				var p = cfg.models[0].ports[i].name;
				
				parsed.push(new TransitionCA("Y", 0, m, c, p, m, v[i]));
			}
			
			var start = chunk.indexOf('[', start + line.length);
		};
		
		return parsed;
	}
}